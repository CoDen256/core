# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - master
  release:
    types: [ created ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@823fcebdb31bb35fdf2229d9f769b400309430d0 # v46
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        with:
          since_last_remote_commit: true
      - name: Identify changed modules
        id: changed-modules
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          # Get list of changed files
          changed_files=$(echo $ALL_CHANGED_FILES | sed 's/ / \.\//g; s/^/\.\//' | tr ' ' '\n')
          echo "$changed_files"
          
          # Find all pom.xml files in the project
          all_poms=$(find . -name 'pom.xml' | sort)
          
          # Initialize array for changed modules
          changed_modules=()
          
          # Check each pom.xml to see if it or its directory contents changed
          for pom in $all_poms; do
            module_dir=$(dirname "$pom")
            echo "checking $pom in $module_dir"          
            # Check if this module's files were changed
            if echo "$changed_files" | grep -q "^$pom$"; then
              if [ "$module_dir" != "." ]; then
                echo "Changed module! $module_dir"
                changed_modules+=("$module_dir")
              fi
            fi
          done
          
          # Convert array to comma-separated string
          modules_csv=$(IFS=, ; echo "${changed_modules[*]}")
          
          # Set output for next steps
          if [ -z "$modules_csv" ]; then
            echo "No modules changed"
            echo "changed_modules=" >> $GITHUB_OUTPUT
          else
            echo "Changed modules: $modules_csv"
            echo "changed_modules=$modules_csv" >> $GITHUB_OUTPUT
          fi

      - name: Build and publish changed modules
        if: steps.changed-modules.outputs.changed_modules != ''
        run: |
          # Install all modules first to ensure dependencies are available
          mvn -B install
          
          # Build and deploy only changed modules and their dependencies
          mvn -B deploy -pl ${{ steps.changed-modules.outputs.changed_modules }} -am \
              -DskipTests \
              -DaltDeploymentRepository=github::https://maven.pkg.github.com/CoDen256/core \
              -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip build when no modules changed
        if: steps.changed-modules.outputs.changed_modules == ''
        run: echo "No modules were changed, skipping build"
