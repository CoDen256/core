# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  push:
    branches:
      - master
  release:
    types: [created]

jobs:
  fetch-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.fetch.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          cache: 'maven'
          distribution: 'temurin'
      - name: Test
        run: mvn -B test
      - name: Extract modules from pom.xml
        id: pom-modules
        run: |
          cat pom.xml
          MODULES=$(grep '<module>' pom.xml | sed 's/<module>//g; s/<\/module>//g; s/^[[:space:]]*//g' | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "modules=${MODULES}" >> $GITHUB_OUTPUT
          echo "Extracted modules: ${MODULES}"
        continue-on-error: true
      - name: Get module versions
        id: fetch
        run: |
          ROOT_VERSION=$(grep -m1 '^    <version>' "./pom.xml" | sed 's/<version>//;s/<\/version>//;s/^[[:space:]]*//;s/[[:space:]]*$//')
          RESULTS=("{\"name\":\"core-aggregator\",\"version\":\"$ROOT_VERSION\"}")
    
          MODULES_JSON='${{ steps.pom-modules.outputs.modules }}'
          MODULES=($(echo "$MODULES_JSON" | jq -r '.[]'))
          
          for module in "${MODULES[@]}"; do
            if [ -f "$module/pom.xml" ]; then
              # Get the SECOND version tag (skip parent version)
              version=$(grep -m1 '^    <version>' "$module/pom.xml" | sed 's/<version>//;s/<\/version>//;s/^[[:space:]]*//;s/[[:space:]]*$//')
              RESULTS+=("{\"name\":\"$module\",\"version\":\"$version\"}")
            else
              echo "Warning: $module/pom.xml not found"
            fi
          done
          
          # Create JSON output
          MATRIX_JSON=$(printf '{"include":[%s]}' "$(IFS=,; echo "${RESULTS[*]}")")
          
          echo $MATRIX_JSON
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  clean:
    runs-on: ubuntu-latest
    needs: fetch-versions
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJSON(needs.fetch-versions.outputs.matrix) }}
    steps:
      - name: Prepare deleting
        run: |
          echo "Deleting ${{ matrix.name }} version ${{ matrix.version }}"
      - name: Delete packages
        uses: shaneapowell/ghaction-package-admin@v0
        with:
          ghtoken: ${{ github.token }}
          operation: deletePackageVersions
          user: ${{ github.repository_owner }}
          package_type: maven
          package_name: io.github.coden256.${{ matrix.name }}
          include: name ${{ matrix.version }}
          summary: true
          debug: true
          dryrun: false
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: clean
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true --file pom.xml
      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -U -DaltDeploymentRepository=github::https://maven.pkg.github.com/CoDen256/core -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}